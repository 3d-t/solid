"use strict";(self.webpackChunksolidwebsite=self.webpackChunksolidwebsite||[]).push([[5773],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return b}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,b=u["".concat(c,".").concat(h)]||u[h]||d[h]||a;return n?o.createElement(b,i(i({ref:t},p),{},{components:n})):o.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6072:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var o=n(3117),r=(n(7294),n(3905));const a={sidebar_position:20},i="Boolean",s={unversionedId:"basic/boolean",id:"basic/boolean",title:"Boolean",description:"The Basic mode also introduces the concept of making complex shapes by using so called Boolean operations: add, subtract and intersect. These operations can be very useful to make holes and rounded shapes. For example, in the image below there is a grey block and a red cylinder that is moved in X-, and Z-direction.",source:"@site/docs/basic/boolean.md",sourceDirName:"basic",slug:"/basic/boolean",permalink:"/docs/basic/boolean",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"defaultSidebar",previous:{title:"Primitives",permalink:"/docs/basic/primitives"},next:{title:"Repetition",permalink:"/docs/basic/repeat"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"boolean"},"Boolean"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Basic")," mode also introduces the concept of making complex shapes by using so called Boolean operations: add, subtract and intersect. These operations can be very useful to make holes and rounded shapes. For example, in the image below there is a grey block and a red cylinder that is moved in X-, and Z-direction. "),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(5494).Z,width:"2732",height:"1802"})),(0,r.kt)("p",null,"You can drag the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," block to the workspace. Drag the list of blocks starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"move")," to the lower opening and drag the remaining ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," to the upper opening as show below. Make sure the operation is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"subtract"),". As you can see the cylinder now cuts a hole in the block."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(7289).Z,width:"2732",height:"1802"})),(0,r.kt)("p",null,"Now change the operation to ",(0,r.kt)("inlineCode",{parentName:"p"},"intersect"),". This means that the part that is common to both the block and the cylinder remains. The resulting shapes is something that looks like a cheese."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(29).Z,width:"2732",height:"1802"})),(0,r.kt)("p",null,"The example below shows how you can make a dice from a block and a sphere. The sphere is slightly bigger than the block and moved up a bit so that is partly sticks out the cube. The middle object shows what happens if you subtract the sphere from the block. The object in the front shows the result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"intersect")," operation: a cube with rounded corners, which looks like a dice. As you can see, Boolean operations are a very powerful tool to make complex objects from simple shapes."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(9252).Z,width:"2732",height:"1802"})))}d.isMDXComponent=!0},5494:function(e,t,n){t.Z=n.p+"assets/images/boolean_1-e5e69909e6f94b482db51fc07f506c5e.png"},7289:function(e,t,n){t.Z=n.p+"assets/images/boolean_3-2d108a37248b9cde530fe1a44e7a65fe.png"},29:function(e,t,n){t.Z=n.p+"assets/images/boolean_4-f5354fcac544322f060e0a389d6b9351.png"},9252:function(e,t,n){t.Z=n.p+"assets/images/dice-357dab33c3322750c20645dcf40c256a.png"}}]);